//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Scripts/Game/WheelChair/WheelChairInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @WheelChairInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @WheelChairInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""WheelChairInput"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""cc12c4f5-00a9-471a-ba58-84eda2392ae3"",
            ""actions"": [
                {
                    ""name"": ""LeftInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""afc5fc8c-ddb6-404f-b585-1a4c7d78f04c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d4cca634-6e8f-464a-8b37-5bb74bf3bd69"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JoyStick"",
                    ""type"": ""Value"",
                    ""id"": ""0e64eed8-5062-4c06-86ec-1c319c8546f7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Archive"",
                    ""type"": ""Button"",
                    ""id"": ""11531941-0ba7-47aa-9dce-363b21e0fd90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LeftKeyboard"",
                    ""id"": ""7a7738f6-d6db-4fc3-92e6-89632a6cf5f3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""3ba020ef-c692-4661-8b20-f663fd344b96"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""61f1da75-f8f2-4da7-9715-a2ed4f471e61"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""7512021f-8781-4f33-8bf9-d84336209995"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""5597d897-1ba1-43b2-aa41-ad4e7f38e813"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""RightKeyboard"",
                    ""id"": ""27230ca6-0690-4950-8b5c-f9225c8ccae8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""6f2b0cf0-7410-4b2b-aad5-4a61387afd7d"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""b0b9b49e-d1c0-4bf6-b354-1d2b7dc33804"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""c6d7541a-7eb6-4ea5-8c23-afce8b57f988"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""1f9898b2-4c04-49c3-b3d4-1e2b6d4f6592"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""704e6ca2-e117-4a20-8b54-627aa905c704"",
                    ""path"": ""<XRController>{RightHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoyStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34ee2168-71a8-412c-9fd8-7d8ff5c899ef"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0),StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Archive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbab61c6-9f43-4595-b03f-9f7a135a31ee"",
                    ""path"": ""<XRController>{RightHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0),StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Archive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HandControllerSensor"",
            ""id"": ""ef910293-1a0a-4001-a13f-570581847acf"",
            ""actions"": [
                {
                    ""name"": ""LeftPosition"",
                    ""type"": ""Value"",
                    ""id"": ""46802f6a-3d59-4e7c-88cf-971a8cab57b1"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightPosition"",
                    ""type"": ""Value"",
                    ""id"": ""1c68a153-fbcd-4dc9-820a-6ac1354ce33a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftAcceleration"",
                    ""type"": ""Value"",
                    ""id"": ""3e7ed476-b8f3-49f2-a867-f8730a5aa181"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightAcceleration"",
                    ""type"": ""Value"",
                    ""id"": ""cb98eb4c-c094-49b9-9cce-a93400c0e4dc"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftSetLocation"",
                    ""type"": ""Button"",
                    ""id"": ""b77b4cb9-59c4-4b01-baaa-de4e173e505c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightSetLocation"",
                    ""type"": ""Button"",
                    ""id"": ""f13ac5b7-dccd-45d2-801c-6abe6cbc08c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""702d3ba5-5ce6-4090-8568-002a16aabe72"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e21a0f3-68fb-40e9-8b75-5c1f0dc966b1"",
                    ""path"": ""<XRController>{LeftHand}/deviceAcceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAcceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9562f41-62e4-4605-969f-9730c50c7d37"",
                    ""path"": ""<XRController>{RightHand}/deviceAcceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightAcceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b933e2ab-b3eb-4f96-9666-c201ecce1a19"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""533c5cc6-f0bc-408e-9273-704c5e3e0595"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftSetLocation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66306685-7ab8-44b1-b56e-a78b5ac5862e"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightSetLocation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_LeftInput = m_Move.FindAction("LeftInput", throwIfNotFound: true);
        m_Move_RightInput = m_Move.FindAction("RightInput", throwIfNotFound: true);
        m_Move_JoyStick = m_Move.FindAction("JoyStick", throwIfNotFound: true);
        m_Move_Archive = m_Move.FindAction("Archive", throwIfNotFound: true);
        // HandControllerSensor
        m_HandControllerSensor = asset.FindActionMap("HandControllerSensor", throwIfNotFound: true);
        m_HandControllerSensor_LeftPosition = m_HandControllerSensor.FindAction("LeftPosition", throwIfNotFound: true);
        m_HandControllerSensor_RightPosition = m_HandControllerSensor.FindAction("RightPosition", throwIfNotFound: true);
        m_HandControllerSensor_LeftAcceleration = m_HandControllerSensor.FindAction("LeftAcceleration", throwIfNotFound: true);
        m_HandControllerSensor_RightAcceleration = m_HandControllerSensor.FindAction("RightAcceleration", throwIfNotFound: true);
        m_HandControllerSensor_LeftSetLocation = m_HandControllerSensor.FindAction("LeftSetLocation", throwIfNotFound: true);
        m_HandControllerSensor_RightSetLocation = m_HandControllerSensor.FindAction("RightSetLocation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private List<IMoveActions> m_MoveActionsCallbackInterfaces = new List<IMoveActions>();
    private readonly InputAction m_Move_LeftInput;
    private readonly InputAction m_Move_RightInput;
    private readonly InputAction m_Move_JoyStick;
    private readonly InputAction m_Move_Archive;
    public struct MoveActions
    {
        private @WheelChairInput m_Wrapper;
        public MoveActions(@WheelChairInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftInput => m_Wrapper.m_Move_LeftInput;
        public InputAction @RightInput => m_Wrapper.m_Move_RightInput;
        public InputAction @JoyStick => m_Wrapper.m_Move_JoyStick;
        public InputAction @Archive => m_Wrapper.m_Move_Archive;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void AddCallbacks(IMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveActionsCallbackInterfaces.Add(instance);
            @LeftInput.started += instance.OnLeftInput;
            @LeftInput.performed += instance.OnLeftInput;
            @LeftInput.canceled += instance.OnLeftInput;
            @RightInput.started += instance.OnRightInput;
            @RightInput.performed += instance.OnRightInput;
            @RightInput.canceled += instance.OnRightInput;
            @JoyStick.started += instance.OnJoyStick;
            @JoyStick.performed += instance.OnJoyStick;
            @JoyStick.canceled += instance.OnJoyStick;
            @Archive.started += instance.OnArchive;
            @Archive.performed += instance.OnArchive;
            @Archive.canceled += instance.OnArchive;
        }

        private void UnregisterCallbacks(IMoveActions instance)
        {
            @LeftInput.started -= instance.OnLeftInput;
            @LeftInput.performed -= instance.OnLeftInput;
            @LeftInput.canceled -= instance.OnLeftInput;
            @RightInput.started -= instance.OnRightInput;
            @RightInput.performed -= instance.OnRightInput;
            @RightInput.canceled -= instance.OnRightInput;
            @JoyStick.started -= instance.OnJoyStick;
            @JoyStick.performed -= instance.OnJoyStick;
            @JoyStick.canceled -= instance.OnJoyStick;
            @Archive.started -= instance.OnArchive;
            @Archive.performed -= instance.OnArchive;
            @Archive.canceled -= instance.OnArchive;
        }

        public void RemoveCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveActions @Move => new MoveActions(this);

    // HandControllerSensor
    private readonly InputActionMap m_HandControllerSensor;
    private List<IHandControllerSensorActions> m_HandControllerSensorActionsCallbackInterfaces = new List<IHandControllerSensorActions>();
    private readonly InputAction m_HandControllerSensor_LeftPosition;
    private readonly InputAction m_HandControllerSensor_RightPosition;
    private readonly InputAction m_HandControllerSensor_LeftAcceleration;
    private readonly InputAction m_HandControllerSensor_RightAcceleration;
    private readonly InputAction m_HandControllerSensor_LeftSetLocation;
    private readonly InputAction m_HandControllerSensor_RightSetLocation;
    public struct HandControllerSensorActions
    {
        private @WheelChairInput m_Wrapper;
        public HandControllerSensorActions(@WheelChairInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftPosition => m_Wrapper.m_HandControllerSensor_LeftPosition;
        public InputAction @RightPosition => m_Wrapper.m_HandControllerSensor_RightPosition;
        public InputAction @LeftAcceleration => m_Wrapper.m_HandControllerSensor_LeftAcceleration;
        public InputAction @RightAcceleration => m_Wrapper.m_HandControllerSensor_RightAcceleration;
        public InputAction @LeftSetLocation => m_Wrapper.m_HandControllerSensor_LeftSetLocation;
        public InputAction @RightSetLocation => m_Wrapper.m_HandControllerSensor_RightSetLocation;
        public InputActionMap Get() { return m_Wrapper.m_HandControllerSensor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HandControllerSensorActions set) { return set.Get(); }
        public void AddCallbacks(IHandControllerSensorActions instance)
        {
            if (instance == null || m_Wrapper.m_HandControllerSensorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HandControllerSensorActionsCallbackInterfaces.Add(instance);
            @LeftPosition.started += instance.OnLeftPosition;
            @LeftPosition.performed += instance.OnLeftPosition;
            @LeftPosition.canceled += instance.OnLeftPosition;
            @RightPosition.started += instance.OnRightPosition;
            @RightPosition.performed += instance.OnRightPosition;
            @RightPosition.canceled += instance.OnRightPosition;
            @LeftAcceleration.started += instance.OnLeftAcceleration;
            @LeftAcceleration.performed += instance.OnLeftAcceleration;
            @LeftAcceleration.canceled += instance.OnLeftAcceleration;
            @RightAcceleration.started += instance.OnRightAcceleration;
            @RightAcceleration.performed += instance.OnRightAcceleration;
            @RightAcceleration.canceled += instance.OnRightAcceleration;
            @LeftSetLocation.started += instance.OnLeftSetLocation;
            @LeftSetLocation.performed += instance.OnLeftSetLocation;
            @LeftSetLocation.canceled += instance.OnLeftSetLocation;
            @RightSetLocation.started += instance.OnRightSetLocation;
            @RightSetLocation.performed += instance.OnRightSetLocation;
            @RightSetLocation.canceled += instance.OnRightSetLocation;
        }

        private void UnregisterCallbacks(IHandControllerSensorActions instance)
        {
            @LeftPosition.started -= instance.OnLeftPosition;
            @LeftPosition.performed -= instance.OnLeftPosition;
            @LeftPosition.canceled -= instance.OnLeftPosition;
            @RightPosition.started -= instance.OnRightPosition;
            @RightPosition.performed -= instance.OnRightPosition;
            @RightPosition.canceled -= instance.OnRightPosition;
            @LeftAcceleration.started -= instance.OnLeftAcceleration;
            @LeftAcceleration.performed -= instance.OnLeftAcceleration;
            @LeftAcceleration.canceled -= instance.OnLeftAcceleration;
            @RightAcceleration.started -= instance.OnRightAcceleration;
            @RightAcceleration.performed -= instance.OnRightAcceleration;
            @RightAcceleration.canceled -= instance.OnRightAcceleration;
            @LeftSetLocation.started -= instance.OnLeftSetLocation;
            @LeftSetLocation.performed -= instance.OnLeftSetLocation;
            @LeftSetLocation.canceled -= instance.OnLeftSetLocation;
            @RightSetLocation.started -= instance.OnRightSetLocation;
            @RightSetLocation.performed -= instance.OnRightSetLocation;
            @RightSetLocation.canceled -= instance.OnRightSetLocation;
        }

        public void RemoveCallbacks(IHandControllerSensorActions instance)
        {
            if (m_Wrapper.m_HandControllerSensorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHandControllerSensorActions instance)
        {
            foreach (var item in m_Wrapper.m_HandControllerSensorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HandControllerSensorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HandControllerSensorActions @HandControllerSensor => new HandControllerSensorActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IMoveActions
    {
        void OnLeftInput(InputAction.CallbackContext context);
        void OnRightInput(InputAction.CallbackContext context);
        void OnJoyStick(InputAction.CallbackContext context);
        void OnArchive(InputAction.CallbackContext context);
    }
    public interface IHandControllerSensorActions
    {
        void OnLeftPosition(InputAction.CallbackContext context);
        void OnRightPosition(InputAction.CallbackContext context);
        void OnLeftAcceleration(InputAction.CallbackContext context);
        void OnRightAcceleration(InputAction.CallbackContext context);
        void OnLeftSetLocation(InputAction.CallbackContext context);
        void OnRightSetLocation(InputAction.CallbackContext context);
    }
}
